CRUD  Create Read  Upload  Delete

Removing VENV
    deactivate if running
    rm -rf VENV
    python3 -m venv venv
    reactivate python with ***source venv/bin/activate
    install flask in new venv ***pip3 install flask

    one example of an editor Swagger Editor
    YAML Yet another markup language

flask looks for templates folder (lowercase) by default.



    Sequence Diagram example:
        Plantext

        template preprocessor renders python output within template so that only html is outputed.

        JINJA3 (https://jinja.palletsprojects.com/en/3.1.x/) minor changes between flask and python


first template:
base.html
index.html


CDN Content Deliver Network  (Faster loads)

{{read only}} JINJA


DJANGO
Is a Python based web framework...(React is as JS based web framework)
DJANGO is very structured, opinionated and strict versus Flask which is very flexible.
DJANGO was originally designed to create a newspaper.

REPL Read Evaluate Print Loop

django-admin startproject config .  
    config is the name we are choosing for the configuration file.
       .     means the directory I'm currently in.
            It creates the project
                type enter if nothing shows...it worked.
                  When you look in the dir you;ll see a manage.py file.
                    that is the steward to your project.

                                                        Available subcommands:

                        [auth]
                            changepassword
                            createsuperuser

                            [contenttypes]
                            remove_stale_contenttypes

                        [django]
                            check
                            compilemessages
                            createcachetable
                            dbshell
                            diffsettings
                            dumpdata
                            flush
                            inspectdb
                            loaddata
                            makemessages
                            makemigrations
                            migrate
                            optimizemigration
                            sendtestemail
                            shell
                            showmigrations
                            sqlflush
                            sqlmigrate
                            sqlsequencereset
                            squashmigrations
                            startapp
                            startproject
                            test
                            testserver

                        [sessions]
                            clearsessions

                        [staticfiles]
                            collectstatic
                            findstatic
                            runserver   #local server 127.0.0.1 port 8000

    Subdirectories (Subfolders) to project directorys are called APPS.  If they have init files they are Modules.

    Settings.py is the heart of your project.
        Almost all variables are constants.

        pathlab is a module as we are importing somthing and it is lowercase Path is capitalized and thus is a CLASS.

            DEBUG = True  allows local hosting....False only lets it run on ALLOWED_HOSTS

            ALLOWED_HOSTS = []

    
    INSTALLED APPS:
        You have to MANUALLY install apps in the settings.py

ROOT_URLCONF = 'config.urls'  #1st point for DJANGO to look for urs requests

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [str(BASE_DIR.joinpath('templates'))],

**** Added "        str(   BASE_DIR.joinpath('templates')  )     "
BASE_DIR is a Pathclass has access to method to append Templates


        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

tz timezone list.

https://en.wikipedia.org/wiki/List_of_tz_database_time_zones


LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'  changed to local ...'America/Denver'
#database timezone format.

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [str(BASE_DIR.joinpath("static"))]   #Every project will need this snippet
STATIC_ROOT = str(BASE_DIR.joinpath("staticfiles"))

                Added these to static files:

                STATICFILES_DIRS = [str(BASE_DIR.joinpath("static"))]     
                                                        #Every project will need this snippet as it holds our files for the project
                STATIC_ROOT = str(BASE_DIR.joinpath("staticfiles"))
                                                        #holds static files for ours and django

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


urls.py tells you how to generate subsequent url files later
    don't use function views for the most part as Flask does that but the strongest way to use Django is to use class-based views
    Flask is just a web framework but DJANGO is a working app out of the box.

to run django server:
    python3 manage.py runserver
        expect some errors





DJANGO's
MVT (Model View Template)
    Templates JINJA
    views   Business Logic
    models
MVC (Model View Controller)
(ORM) Object Relational Mapper) translates between sql and python
                    ORM stands for Object-Relational Mapping, which is a programming technique used to interact with databases in an object-oriented way. With ORM programming, developers can use programming languages' native object-oriented constructs to interact with databases, rather than writing SQL queries directly.

                    ORM frameworks typically provide a layer of abstraction between the database and the application code, which allows developers to define database models as classes with attributes and methods. The ORM framework then handles the translation of these models to SQL queries, and manages the communication between the application and the database.

                    Common ORM frameworks include Django's ORM, SQLAlchemy, and Hibernate. ORM programming can help simplify database interactions and make application development more efficient and maintainable.

    MIGRATIONS scripts that ORM processes to create the tables/rows/etc.

Stop Server with CTRL-C

python3 manage.py migrate       #Migrates all the files to fix the error:

    "You have 18 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.
    Run 'python manage.py migrate' to apply them."

Create a SUPERUSER
python3 manage.py createsuperuser
Test1234

Restart server:
    python3 manage.py runserver
        go to server on browser but add /admin and log in.


        model is a python class for db
        create read update delete CRUD

stop server
    python3 manage.py startapp pages #pages is the name we chose.

Intruduct a view-class
    TemplateView is the most basic view.  replace that in views.py

    replace original with:

    import django.views.generic import TemplateView

    class HomePageView(TemplateView):
        template_name = "home.html"

            object oriented programming.  we are extending the templateview and adding our own differentiation with template_name.


urlpatterns = [
    path('admin/', admin.site.urls),
    path("", include("pages.urls")),  #ALWAYS ADD TRAILING COMMA TO URL PATTERNS

    the recipe for any urls.py 
        from django.urls. import path


        urlpatterns = [
            path ("", HomePageView.as_view(), name="home"),
        ]